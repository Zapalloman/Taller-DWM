US-09 - Perfil de usuario y direcciones

Contexto
- Sistema: Craft & Beer (FastAPI + MongoDB)
- Propósito: permitir al usuario ver y editar su perfil y gestionar direcciones de envío.

Resumen rápido
- Endpoints (requieren autenticación):
  - GET  /api/usuarios/perfil
  - PUT  /api/usuarios/perfil
  - GET  /api/usuarios/direcciones
  - POST /api/usuarios/direcciones
  - DELETE /api/usuarios/direcciones/{direccion_id}
- Headers obligatorios: Authorization: Bearer <JWT>

Estructura usuario (parcial)
- id: string (Mongo ObjectId)
- email: string
- nombre: string
- telefono: string (opcional)
- direcciones: array of direccion

Estructura direccion
- direccion_id: string (Mongo ObjectId)
- etiqueta: string (ej.: "casa", "trabajo")
- calle: string
- numero: string
- ciudad: string
- provincia: string
- codigo_postal: string
- pais: string
- principal: boolean

Validaciones clave
- Todos los endpoints requieren JWT válido; si no -> 401
- PUT perfil valida formato de email si se cambia y nombre no vacío
- POST dirección valida campos obligatorios y marca solo una como `principal`

Escenarios Gherkin y detalles

1) Ver y editar perfil
Scenario: Obtener perfil de usuario autenticado
  Given usuario autenticado
  When GET /api/usuarios/perfil
  Then HTTP 200 OK con datos del usuario y sus direcciones

Endpoint: /api/usuarios/perfil
Method: GET
Headers: Authorization: Bearer <JWT>
Request body: none

Response (200 OK) example:
{
  "id": "64f4d5e6f7890a1234567890",
  "email": "lucia@mail.example",
  "nombre": "Lucía Fernández",
  "telefono": "+34 600 000 000",
  "direcciones": [
    {
      "direccion_id": "860f1a2b3c4d5e6f7890b111",
      "etiqueta": "casa",
      "calle": "Calle Falsa",
      "numero": "123",
      "ciudad": "Madrid",
      "provincia": "Madrid",
      "codigo_postal": "28080",
      "pais": "España",
      "principal": true
    }
  ]
}

Scenario: Actualizar perfil exitosamente
  Given usuario autenticado
  When PUT /api/usuarios/perfil con body válido
  Then HTTP 200 OK con perfil actualizado

Endpoint: /api/usuarios/perfil
Method: PUT
Headers: Content-Type: application/json, Authorization: Bearer <JWT>
Request body example:
{
  "nombre": "Lucía M. Fernández",
  "telefono": "+34 600 111 222"
}

Response (200 OK) example:
{
  "id": "64f4d5e6f7890a1234567890",
  "email": "lucia@mail.example",
  "nombre": "Lucía M. Fernández",
  "telefono": "+34 600 111 222",
  "direcciones": []
}

Response (400 Bad Request) example (validación):
{
  "error": "validation_error",
  "message": "Datos inválidos",
  "details": {
    "email": "Formato de email inválido"
  }
}

2) Gestionar direcciones de envío
Scenario: Listar direcciones del usuario
  Given usuario autenticado
  When GET /api/usuarios/direcciones
  Then HTTP 200 OK con array de direcciones

Endpoint: /api/usuarios/direcciones
Method: GET
Headers: Authorization: Bearer <JWT>
Request body: none

Response (200 OK) example:
[
  {
    "direccion_id": "860f1a2b3c4d5e6f7890b111",
    "etiqueta": "casa",
    "calle": "Calle Falsa",
    "numero": "123",
    "ciudad": "Madrid",
    "provincia": "Madrid",
    "codigo_postal": "28080",
    "pais": "España",
    "principal": true
  }
]

Scenario: Agregar nueva dirección
  Given usuario autenticado
  When POST /api/usuarios/direcciones con body válido
  Then HTTP 201 Created con la dirección creada

Endpoint: /api/usuarios/direcciones
Method: POST
Headers: Content-Type: application/json, Authorization: Bearer <JWT>
Request body example:
{
  "etiqueta": "trabajo",
  "calle": "Avenida Central",
  "numero": "10",
  "ciudad": "Barcelona",
  "provincia": "Barcelona",
  "codigo_postal": "08001",
  "pais": "España",
  "principal": false
}

Response (201 Created) example:
{
  "direccion_id": "960f1a2b3c4d5e6f7890b222",
  "etiqueta": "trabajo",
  "calle": "Avenida Central",
  "numero": "10",
  "ciudad": "Barcelona",
  "provincia": "Barcelona",
  "codigo_postal": "08001",
  "pais": "España",
  "principal": false
}

Response (400 Bad Request) example (validación):
{
  "error": "validation_error",
  "message": "Datos inválidos",
  "details": {
    "ciudad": "La ciudad es obligatoria"
  }
}

Scenario: Eliminar dirección
  Given usuario autenticado y direccion existe
  When DELETE /api/usuarios/direcciones/{direccion_id}
  Then HTTP 204 No Content (o 200 con mensaje)
  Else si no existe -> 404 Not Found

Endpoint: /api/usuarios/direcciones/{direccion_id}
Method: DELETE
Headers: Authorization: Bearer <JWT>
Path param: direccion_id

Response (204 No Content): (sin body)

Response (404 Not Found) example:
{
  "error": "not_found",
  "message": "Dirección con id '960f1a...' no encontrada"
}

Notas de implementación (concisas)
- Autenticación: JWT y uso de claim `usuario_id` para identificar recurso.
- Al crear dirección y `principal`=true, marcar otras direcciones del usuario como principal=false (operación atómica).
- Persistencia: subdocumentos en `usuarios.direcciones` o colección separada `direcciones` con referencia a usuario_id.
- Validación y sanitización de campos.

HTTP codes usados (resumen)
- 200 OK — GET/PUT exitosos
- 201 Created — POST dirección
- 204 No Content — DELETE exitoso
- 400 Bad Request — validación de entrada
- 401 Unauthorized — token ausente/inválido
- 404 Not Found — recurso no existe
- 500 Internal Server Error — error no esperado


