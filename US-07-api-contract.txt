US-07 - Sistema de valoraciones y comentarios

Contexto
- Sistema: Craft & Beer (FastAPI + MongoDB)
- Propósito: permitir consultar y agregar valoraciones/comentarios de una cerveza.

Resumen rápido
- GET  /api/cervezas/{id}/valoraciones  — listar valoraciones de una cerveza
- POST /api/cervezas/{id}/valoraciones  — agregar nueva valoración (requiere auth y haber comprado)

Estructura de una valoración (documento)
- usuario_id: string (Mongo ObjectId)
- usuario_nombre: string
- puntuacion: integer (1-5)
- comentario: string (opcional, max 1000 chars)
- fecha: ISO-8601 string

Validaciones clave
- puntuacion: entero entre 1 y 5
- comentario: no obligatorio, máximo 1000 caracteres
- POST requiere header Authorization: Bearer <JWT>
- POST valida que el usuario haya comprado la cerveza (compras en colección `pedidos`)

Escenarios Gherkin y detalles

1) Ver valoraciones existentes de una cerveza
Scenario: Obtener valoraciones de una cerveza
  Given existe una cerveza con id válido y tiene valoraciones
  When GET /api/cervezas/{id}/valoraciones
  Then HTTP 200 OK con lista de valoraciones
  Else si cerveza no existe -> 404 Not Found

Endpoint: /api/cervezas/{id}/valoraciones
Method: GET
Path parameters:
  - id: string (Mongo ObjectId) — id de la cerveza
Headers:
  - Accept: application/json
Request: (no body)

Response (200 OK) example:
{
  "cerveza_id": "64f1a2b3c4d5e6f7890a1234",
  "valoraciones": [
    {
      "usuario_id": "64f2b3c4d5e6f7890a123456",
      "usuario_nombre": "Carlos Gómez",
      "puntuacion": 5,
      "comentario": "Excelente aroma y final suave.",
      "fecha": "2025-09-20T11:12:00Z"
    },
    {
      "usuario_id": "64f3c4d5e6f7890a12345678",
      "usuario_nombre": "Ana Ruiz",
      "puntuacion": 4,
      "comentario": "Buena, aunque un poco amarga para mi gusto.",
      "fecha": "2025-09-21T09:05:00Z"
    }
  ],
  "count": 2
}

Response (404 Not Found) example:
{
  "error": "not_found",
  "message": "Cerveza con id '64f1a2b3...' no encontrada"
}

Paginación y filtros (opcional): soportar query params ?page=1&limit=20

2) Agregar nueva valoración (solo si compró el producto)
Scenario: Usuario autenticado agrega valoración tras compra
  Given usuario autenticado y ha comprado la cerveza
  When POST /api/cervezas/{id}/valoraciones con body válido
  Then HTTP 201 Created y body con la valoración creada

Caso de error: no autenticado -> 401 Unauthorized
Caso de error: usuario no compró -> 403 Forbidden
Caso de error: validación de entrada -> 400 Bad Request

Endpoint: /api/cervezas/{id}/valoraciones
Method: POST
Path parameters:
  - id: string (Mongo ObjectId) — id de la cerveza
Headers:
  - Content-Type: application/json
  - Authorization: Bearer <JWT>

Request body example:
{
  "usuario_nombre": "Lucía Fernández",
  "puntuacion": 5,
  "comentario": "Impresionante IPA, muy balanceada."
}

Successful Response (201 Created) example:
{
  "id": "750f1a2b3c4d5e6f7890a999",
  "cerveza_id": "64f1a2b3c4d5e6f7890a1234",
  "usuario_id": "64f4d5e6f7890a1234567890",
  "usuario_nombre": "Lucía Fernández",
  "puntuacion": 5,
  "comentario": "Impresionante IPA, muy balanceada.",
  "fecha": "2025-09-26T15:00:00Z"
}

Response (401 Unauthorized) example:
{
  "error": "unauthorized",
  "message": "Token de autenticación inválido o ausente"
}

Response (403 Forbidden) example (no compró):
{
  "error": "forbidden",
  "message": "Solo los usuarios que han comprado esta cerveza pueden valorar."
}

Response (400 Bad Request) example (validación):
{
  "error": "validation_error",
  "message": "Datos de entrada inválidos",
  "details": {
    "puntuacion": "La puntuación debe ser un entero entre 1 y 5"
  }
}

Notas de implementación (concisas)
- Autenticación: JWT en header Authorization. Decodificar y obtener `usuario_id`.
- Validación de compra: consultar colección `pedidos` por usuario_id y cerveza_id (estado 'entregado' o 'comprado').
- Persistencia: colección `valoraciones` con índice compuesto en (cerveza_id, usuario_id) si se desea evitar duplicados.
- Normalizar errores: retornar { error, message, details? } para que el cliente pueda manejar respuestas.
- Seguridad: sanitizar comentarios y limitar longitud para evitar abusos.

HTTP codes usados
- 200 OK — GET exitoso
- 201 Created — POST exitoso
- 400 Bad Request — validación de entrada
- 401 Unauthorized — token ausente/inválido
- 403 Forbidden — usuario no autorizado (no compró)
- 404 Not Found — cerveza no encontrada
- 500 Internal Server Error — error no esperado

