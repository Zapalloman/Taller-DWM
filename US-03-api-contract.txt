US-03 - Vista de detalle de producto


Resumen técnico breve
- Sistema: Craft & Beer (FastAPI + MongoDB)
- Historia: US-03 permitir a usuarios ver los detalles completos de una cerveza específica
- Endpoint: GET /api/cervezas/{id}
- Campos adicionales: descripción, ABV, IBU, ingredientes, valoración_promedio
- Manejo de errores: 404 si el id no existe, 400 si id inválido, 500 para errores internos

Contrato API (lenguaje claro y técnico)

Escenario: Ver detalles completos de una cerveza específica

Gherkin (resumen)
- Dado que existe una cerveza con un ObjectId válido en la base de datos
- Cuando el cliente solicita GET /api/cervezas/{id}
- Entonces el servidor responde 200 con el objeto cerveza completo o 404 si no existe

Endpoint
- URL: /api/cervezas/{id}
- Método: GET
- Headers obligatorios: Accept: application/json

Parámetros
- id: path parameter, string. Debe ser un ObjectId válido de MongoDB (pattern '^[a-fA-F0-9]{24}$').

Body request
- No aplica (GET).

Responses
- 200 OK
  - Descripción: Se devuelve la representación completa del recurso cerveza.
  - Content-Type: application/json
  - Esquema (JSON):
    {
      "id": "string",
      "nombre": "string",
      "tipo": "string",
      "precio": 3.50,
      "imagen_url": "string",
      "formato": "string",
      "disponible": true,
      "descripcion": "string",
      "abv": 5.5,                 // alcohol by volume, porcentaje
      "ibu": 45,                  // International Bitterness Units, entero
      "ingredientes": ["malta", "lupulo", "levadura", ...],
      "valoracion_promedio": 4.3  // float entre 0 y 5
    }

  - Ejemplo realista:

  HTTP/1.1 200 OK
  Content-Type: application/json

  {
    "id": "650c3d2f4c3e2a6b9d0f3c10",
    "nombre": "Lupulina IPA",
    "tipo": "IPA",
    "precio": 4.20,
    "imagen_url": "https://cdn.craftandbeer.local/images/lupulina-ipa-330.jpg",
    "formato": "330ml",
    "disponible": true,
    "descripcion": "IPA americana con aroma cítrico y notas resinosas. Lúpulos Citra y Cascade.",
    "abv": 6.2,
    "ibu": 60,
    "ingredientes": ["agua", "malta de cebada", "lúpulo (Citra, Cascade)", "levadura ale"],
    "valoracion_promedio": 4.6
  }

- 400 Bad Request
  - Causa: id en formato incorrecto (no cumple pattern ObjectId)
  - Esquema:
    {
      "error": {
        "code": 400,
        "message": "Parámetro de ruta inválido",
        "details": { "param": "id", "message": "must be a 24-hexadecimal-char string" }
      }
    }
  - Ejemplo:

  HTTP/1.1 400 Bad Request
  Content-Type: application/json

  {
    "error": {
      "code": 400,
      "message": "Parámetro de ruta inválido",
      "details": { "param": "id", "message": "must be a 24-hexadecimal-char string" }
    }
  }

- 404 Not Found
  - Causa: no existe recurso con el id solicitado
  - Esquema:
    {
      "error": {
        "code": 404,
        "message": "Cerveza no encontrada",
        "details": { "id": "650c3d2f4c3e2a6b9d0f3c99" }
      }
    }
  - Ejemplo:

  HTTP/1.1 404 Not Found
  Content-Type: application/json

  {
    "error": {
      "code": 404,
      "message": "Cerveza no encontrada",
      "details": { "id": "650c3d2f4c3e2a6b9d0f3c99" }
    }
  }

- 500 Internal Server Error
  - Causa: error interno en servidor/DB. Respuesta genérica:
    { "error": { "code": 500, "message": "Error interno del servidor" } }

Notas de diseño e implementación
- Validación de path param: usar Pydantic con regex '^[a-fA-F0-9]{24}$' o un validador custom para devolver 400 antes de consultar DB.
- Consulta eficiente: buscar por _id con ObjectId("...") y proyectar campos necesarios.
- Valoración promedio: calcular con agregación si no está persistida, pero recomendable mantener campo denormalizado y actualizar en escrituras para lecturas rápidas.
- Ingredientes: array de strings; si se requiere estructura más rica (cantidad, unidad) usar objetos {nombre, cantidad, unidad}.
- ABV/IBU: ABV como float (0-100), IBU como integer (0-120 típicamente).
- Seguridad: parametrizar y sanitizar inputs; no exponer información sensible.
- Cache: soportar Cache-Control y ETag para recursos de solo lectura.

Recomendaciones para tests
- Happy path: id válido existente -> 200 con todos los campos.
- 400: id malformado -> 400.
- 404: id correcto sintácticamente pero no existente -> 404.
- Performance: test de latencia cuando la valoración se calcula on-the-fly.

Mapping de requisitos -> estado
- Título con número de historia: presente
- Escenario Gherkin con endpoint, método, parámetros, body request y response: presente
- JSON examples realistas: incluidos
- Códigos HTTP específicos: 200, 400, 404, 500 incluidos
- Lenguaje claro y técnico: cumplido


