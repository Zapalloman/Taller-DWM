US-10 - Historial de pedidos

Contexto
- Sistema: Craft & Beer (FastAPI + MongoDB)
- Propósito: permitir al usuario consultar su historial de pedidos.

Resumen rápido
- Endpoint: GET /api/usuarios/pedidos
- Requiere: Authorization: Bearer <JWT>
- Query params opcionales: limit (int, número máximo de pedidos a devolver), desde (ISO-8601 cursor)

Estructura de un pedido (resumen)
- id: string (Mongo ObjectId)
- fecha: ISO-8601 string
- total: number (euros)
- estado: string (ej.: "pendiente", "preparando", "enviado", "entregado", "cancelado")
- items: array de { producto_id, nombre, cantidad, precio_unitario }

Escenario Gherkin
Scenario: Usuario autenticado consulta su historial de pedidos
  Given usuario autenticado
  When GET /api/usuarios/pedidos?limit=10
  Then HTTP 200 OK con array de hasta 10 pedidos ordenados por fecha descendente
  Else si token inválido -> 401 Unauthorized

Endpoint: /api/usuarios/pedidos
Method: GET
Headers: Authorization: Bearer <JWT>
Query params:
  - limit: integer (opcional, default 20, max 100)
  - desde: ISO-8601 string (opcional, para paginación)

Request body: none

Response (200 OK) example:
{
  "count": 2,
  "limit": 10,
  "pedidos": [
    {
      "id": "a1b2c3d4e5f6789012345678",
      "fecha": "2025-09-25T18:20:00Z",
      "total": 34.50,
      "estado": "entregado",
      "items": [
        { "producto_id": "64f1a2b3c4d5e6f7890a1234", "nombre": "IPA - Citra Dream", "cantidad": 2, "precio_unitario": 4.5 },
        { "producto_id": "64f3c4d5e6f7890a12345678", "nombre": "Stout - Chocolate Night", "cantidad": 1, "precio_unitario": 5.75 }
      ]
    },
    {
      "id": "b2c3d4e5f67890123456789a",
      "fecha": "2025-09-20T12:05:00Z",
      "total": 18.00,
      "estado": "enviado",
      "items": [
        { "producto_id": "64f1a2b3c4d5e6f7890a1234", "nombre": "IPA - Citra Dream", "cantidad": 4, "precio_unitario": 4.5 }
      ]
    }
  ]
}

Response (401 Unauthorized) example:
{
  "error": "unauthorized",
  "message": "Token ausente o inválido"
}

Response (400 Bad Request) example (limit inválido):
{
  "error": "validation_error",
  "message": "Parámetros inválidos",
  "details": {
    "limit": "El parámetro 'limit' debe ser un entero entre 1 y 100"
  }
}

Notas de implementación (concisas)
- Autenticación: JWT y uso de claim `usuario_id` para filtrar pedidos.
- Paginación: soportar `limit` y `desde` (cursor por fecha o id) para pages seguras.
- Orden: devolver pedidos ordenados por `fecha` descendente.
- Performance: indexar `usuario_id` + `fecha` en colección `pedidos`.
- Seguridad: no exponer datos sensibles de pago en este endpoint.

HTTP codes usados
- 200 OK — petición exitosa
- 400 Bad Request — parámetros inválidos
- 401 Unauthorized — token ausente/inválido
- 500 Internal Server Error — error no esperado

Fin del contrato (resumido).
